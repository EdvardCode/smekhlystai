const express = require('express');
const app = express();
const http = require('http').createServer(app);
const io = require('socket.io')(http);

app.use(express.static('public'));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–≥—Ä)
const games = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
function generateRoomCode() {
    return Math.random().toString(36).substring(2, 6).toUpperCase();
}

const questions = [
    "–•—É–¥—à–∏–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è?",
    "–ß—Ç–æ –±—ã –≤—ã –∫—Ä–∏–∫–Ω—É–ª–∏, –ø—Ä—ã–≥–∞—è —Å –ø–∞—Ä–∞—à—é—Ç–æ–º?",
    "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–≤—Ç–æ–±–∏–æ–≥—Ä–∞—Ñ–∏–∏?",
    "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞ —Å—É–ø–µ—Ä–≥–µ—Ä–æ—è?",
    "–•—É–¥—à–∏–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —Å–ª–æ–≥–∞–Ω –¥–ª—è –ø–æ—Ö–æ—Ä–æ–Ω–Ω–æ–≥–æ –±—é—Ä–æ?",
    "–ß—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –≤–∞—à–µ–π —Ñ—É—Ç–±–æ–ª–∫–µ?",
    "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞?",
    "–•—É–¥—à–∏–π —Å–æ–≤–µ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–≤–∏–¥–∞–Ω–∏—è?",
    "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ä–æ–∫-–≥—Ä—É–ø–ø—ã?",
    "–ß—Ç–æ –Ω–µ–ª—å–∑—è –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ–ª–∏—Ü–µ–π—Å–∫–æ–º—É?",
    "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –±–∞–±—É—à–∫–∏–Ω–æ–≥–æ —Å—É–ø–∞?",
    "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞?",
    "–ß—Ç–æ –≤—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–∫–∞–∂–µ—Ç–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏?",
    "–•—É–¥—à–µ–µ –∏–º—è –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞?",
    "–°–ª–æ–≥–∞–Ω –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è?"
];

io.on('connection', (socket) => {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    
    let currentRoom = null;
    let isHost = false;

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã (HOST)
    socket.on('createGame', () => {
        const roomCode = generateRoomCode();
        currentRoom = roomCode;
        isHost = true;

        games.set(roomCode, {
            host: socket.id,
            players: [],
            phase: 'lobby',
            answers: {},
            votes: {},
            scores: {},
            currentQuestion: 0
        });

        socket.join(roomCode);
        socket.emit('gameCreated', { roomCode });
        console.log(`üéÆ –°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–∞: ${roomCode}`);
    });

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    socket.on('joinGame', (data) => {
        const { roomCode, name, avatar } = data;
        const game = games.get(roomCode);

        if (!game) {
            socket.emit('error', '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
            return;
        }

        if (game.phase !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!');
            return;
        }

        const player = {
            id: socket.id,
            name: name,
            avatar: avatar
        };

        game.players.push(player);
        game.scores[socket.id] = 0;
        
        currentRoom = roomCode;
        socket.join(roomCode);

        io.to(roomCode).emit('playerJoined', { player, players: game.players });
        socket.emit('joinSuccess', player);

        console.log(`üë§ ${name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ ${roomCode}`);
    });

    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    socket.on('startGame', () => {
        if (!isHost || !currentRoom) return;

        const game = games.get(currentRoom);
        if (!game || game.players.length < 2) {
            socket.emit('error', '–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }

        game.phase = 'answering';
        game.currentQuestion = 0;
        game.answers = {};

        const question = questions[game.currentQuestion];
        io.to(currentRoom).emit('gameStarted', {
            question,
            round: 1,
            total: Math.min(questions.length, 7)
        });

        console.log(`‚ñ∂Ô∏è –ò–≥—Ä–∞ ${currentRoom} –Ω–∞—á–∞–ª–∞—Å—å!`);
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    socket.on('submitAnswer', (answer) => {
        if (!currentRoom) return;

        const game = games.get(currentRoom);
        if (!game) return;

        game.answers[socket.id] = answer;

        io.to(currentRoom).emit('answerProgress', {
            current: Object.keys(game.answers).length,
            total: game.players.length
        });

        // –í—Å–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
        if (Object.keys(game.answers).length === game.players.length) {
            setTimeout(() => startVoting(currentRoom), 2000);
        }
    });

    // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    socket.on('vote', (answerId) => {
        if (!currentRoom) return;

        const game = games.get(currentRoom);
        if (!game || game.votes[socket.id]) return;

        if (answerId === socket.id) {
            socket.emit('error', '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è!');
            return;
        }

        game.votes[socket.id] = answerId;
        game.scores[answerId] = (game.scores[answerId] || 0) + 1000;

        io.to(currentRoom).emit('voteProgress', {
            current: Object.keys(game.votes).length,
            total: game.players.length
        });

        // –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        if (Object.keys(game.votes).length === game.players.length) {
            setTimeout(() => showResults(currentRoom), 2000);
        }
    });

    // –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
    socket.on('nextRound', () => {
        if (!isHost || !currentRoom) return;

        const game = games.get(currentRoom);
        if (!game) return;

        game.currentQuestion++;

        if (game.currentQuestion >= Math.min(questions.length, 7)) {
            endGame(currentRoom);
        } else {
            game.phase = 'answering';
            game.answers = {};
            game.votes = {};

            const question = questions[game.currentQuestion];
            io.to(currentRoom).emit('newRound', {
                question,
                round: game.currentQuestion + 1,
                total: Math.min(questions.length, 7)
            });
        }
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    socket.on('disconnect', () => {
        if (currentRoom) {
            const game = games.get(currentRoom);
            if (game) {
                // –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª—Å—è —Ö–æ—Å—Ç - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É
                if (isHost) {
                    io.to(currentRoom).emit('hostLeft');
                    games.delete(currentRoom);
                    console.log(`‚ùå –ò–≥—Ä–∞ ${currentRoom} –∑–∞–∫—Ä—ã—Ç–∞ (—Ö–æ—Å—Ç –≤—ã—à–µ–ª)`);
                } else {
                    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
                    game.players = game.players.filter(p => p.id !== socket.id);
                    delete game.scores[socket.id];
                    delete game.answers[socket.id];
                    delete game.votes[socket.id];

                    io.to(currentRoom).emit('playerLeft', {
                        playerId: socket.id,
                        players: game.players
                    });
                }
            }
        }
        console.log('‚ùå –û—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function startVoting(roomCode) {
        const game = games.get(roomCode);
        if (!game) return;

        game.phase = 'voting';
        game.votes = {};

        const answersArray = Object.entries(game.answers).map(([id, text]) => ({
            id,
            text,
            player: game.players.find(p => p.id === id)
        }));

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        answersArray.sort(() => Math.random() - 0.5);

        io.to(roomCode).emit('votingStarted', {
            question: questions[game.currentQuestion],
            answers: answersArray
        });
    }

    function showResults(roomCode) {
        const game = games.get(roomCode);
        if (!game) return;

        game.phase = 'results';

        const results = Object.entries(game.answers).map(([id, answer]) => {
            const player = game.players.find(p => p.id === id);
            const votesCount = Object.values(game.votes).filter(v => v === id).length;

            return {
                id,
                name: player?.name,
                avatar: player?.avatar,
                answer,
                votes: votesCount,
                score: game.scores[id]
            };
        }).sort((a, b) => b.votes - a.votes);

        io.to(roomCode).emit('roundResults', results);
    }

    function endGame(roomCode) {
        const game = games.get(roomCode);
        if (!game) return;

        game.phase = 'finished';

        const finalScores = game.players.map(p => ({
            name: p.name,
            avatar: p.avatar,
            score: game.scores[p.id] || 0
        })).sort((a, b) => b.score - a.score);

        io.to(roomCode).emit('gameFinished', finalScores);
    }
});

const PORT = process.env.PORT || 3000;
http.listen(PORT, () => {
    console.log('\nüéâ ================================');
    console.log('   –°–ú–ï–•–õ–´–°–¢ - –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!');
    console.log('================================');
    console.log(`\nüåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:${PORT}/host.html`);
    console.log(`üì± –ò–ª–∏ –¥–µ–ø–ª–æ–π—Ç–µ –Ω–∞ Render.com –¥–ª—è –æ–Ω–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø–∞!\n`);
});